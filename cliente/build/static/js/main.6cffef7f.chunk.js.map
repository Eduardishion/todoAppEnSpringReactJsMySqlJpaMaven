{"version":3,"sources":["components/conponentesSecundarios/componenteAppDjangoWithAxios.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["componenteApp","state","titulo","descrip","tareas","id","AgregarYActulizarTarea","bind","ManejarElCambio","this","Obtenertareas","e","console","log","axios","put","headers","then","res","setState","toast","success","position","BOTTOM_LEFT","post","data","catch","preventDefault","get","responseType","status","delete","error","target","name","value","className","onSubmit","method","type","placeholder","onChange","Button","variant","autoClose","Table","hover","size","responsive","map","tarea","key","onClick","EliminarTarea","ObtenerIdParaActualizar","Component","App","users","Container","user","username","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yWAyaeA,G,kBAlZX,aAAc,IAAD,8BAIT,+CAGKC,MAAM,CAIPC,OAAO,GACPC,QAAQ,GACRC,OAAO,GACPC,GAAG,IAKP,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAC9B,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBApBd,E,iFA6BTE,KAAKC,kB,6CAIcC,GAAG,IAAD,OAClBF,KAAKR,MAAMI,IAGVO,QAAQC,IAAI,6BAsBZC,IAAMC,IAAI,oCAAoCN,KAAKR,MAAMI,GAAG,IAAI,CAE5DH,OAAOO,KAAKR,MAAMC,OAClBC,QAAQM,KAAKR,MAAME,QACnBa,QAAQ,CACJ,OAAU,mBACV,eAAgB,sBAGvBC,MAAK,SAAAC,GAEFN,QAAQC,IAAIK,GAEZ,EAAKC,SAAS,CAACjB,OAAO,GAAIC,QAAQ,GAAIE,GAAG,KAEzC,EAAKK,gBAELU,IAAMC,QAAQ,uBAAuB,CACjCC,SAAUF,IAAMG,mBAKxBX,QAAQC,IAAI,oDAyDZC,IAAMU,KAAK,oCAAqC,CAE5CtB,OAAOO,KAAKR,MAAMC,OAClBC,QAAQM,KAAKR,MAAME,QACnBa,QAAQ,CACJ,OAAU,mBACV,eAAgB,sBAGvBC,MAAK,SAACC,GAEHN,QAAQC,IAAIK,GAEZN,QAAQC,IAAIK,EAAIO,MAEhB,EAAKN,SAAS,CAACjB,OAAO,GAAGC,QAAQ,KAEjC,EAAKO,gBAELU,IAAMC,QAAQ,oBAAoB,CAC9BC,SAAUF,IAAMG,iBAGvBG,OAAM,SAAAf,GACHC,QAAQC,IAAIF,OAQpBA,EAAEgB,mB,sCAGU,IAAD,OAcXb,IAAMc,IAAI,oCAAqC,CAC3CC,aAAc,SAEjBZ,MAAK,SAACC,GACa,MAAbA,EAAIY,SAEHlB,QAAQC,IAAIK,GAEZN,QAAQC,IAAIK,EAAIO,MAEhB,EAAKN,SAAS,CAACf,OAAOc,EAAIO,WAGjCC,OAAM,SAACf,GAEJC,QAAQC,IAAIF,Q,oCAQNN,GAAI,IAAD,OAiCbO,QAAQC,IAAI,sBAAsBR,GAElCS,IAAMiB,OAAO,oCAAoC1B,EAAG,CAChDW,QAAQ,CACJ,OAAU,mBACV,eAAgB,sBAGvBC,MAAK,SAACC,GAIa,MAAbA,EAAIY,SAEH,EAAKpB,gBACLU,IAAMY,MAAM,oBAAoB,CACxBV,SAAUF,IAAMG,kBAG7BG,OAAM,SAACf,GAENC,QAAQC,IAAIF,Q,8CAMIN,GAAI,IAAD,OAqBvBS,IAAMc,IAAI,oCAAoCvB,GACzCY,MAAK,SAAAC,GACFN,QAAQC,IAAIK,EAAIO,MAEhB,EAAKN,SAAS,CACVjB,OAAQgB,EAAIO,KAAKvB,OACjBC,QAASe,EAAIO,KAAKtB,QAClBE,GAAIa,EAAIO,KAAKpB,QAGpBqB,OAAM,SAACf,GAEJC,QAAQC,IAAIF,Q,sCAORA,GAAE,MAMSA,EAAEsB,OAAlBC,EANO,EAMPA,KAAMC,EANC,EAMDA,MAEb1B,KAAKU,SAAL,eACKe,EAAMC,M,+BAOL,IAAD,OACL,OACI,6BACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,UACX,yEACA,2GAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,8CACA,0BAAMC,SAAU5B,KAAKH,uBAAwBgC,OAAO,QAEhD,yBAAKF,UAAU,OACX,yBAAKA,UAAU,UAGX,2BAAOG,KAAK,OAAOL,KAAK,SAAUM,YAAY,SAASC,SAAUhC,KAAKD,gBAAiB2B,MAAO1B,KAAKR,MAAMC,WAGjH,yBAAKkC,UAAU,OACX,yBAAKA,UAAU,UAIX,2BAAOG,KAAK,OAAOL,KAAK,UAAWM,YAAY,cAAcC,SAAUhC,KAAKD,gBAAiB2B,MAAO1B,KAAKR,MAAME,YAGvH,yBAAKiC,UAAU,OACX,yBAAKA,UAAU,UACX,kBAACM,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,UAA/B,YAAyD,+BAGjE,kBAAC,IAAD,CAAgBK,UAAW,SAGnC,yBAAKR,UAAU,mBACX,kDACA,kBAACS,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,KAAKC,YAAU,GAC7B,+BACI,4BACI,sCACA,6CAGR,+BAEQvC,KAAKR,MAAMG,OAAO6C,KAAI,SAAAC,GAClB,OAGI,wBAAIC,IAAOD,EAAM7C,IACb,gCAAM6C,EAAMhD,OAAZ,MACA,gCAAMgD,EAAM/C,QAAZ,KACA,4BACI,kBAACuC,EAAA,EAAD,CAAQC,QAAQ,UAAUS,QAAS,kBAAM,EAAKC,cAAcH,EAAM7C,MAAlE,cAA0F,8BAE9F,4BACI,kBAACqC,EAAA,EAAD,CAAQC,QAAQ,UAAUS,QAAS,kBAAM,EAAKE,wBAAwBJ,EAAM7C,MAA5E,gBAAsG,2C,GArY9HkD,cC4CbC,E,YAzCb,aAAc,IAAD,8BAEX,+CAEKvD,MAAM,CAACwD,MAAO,IAJR,E,sEAgBX,OACE,kBAACC,EAAA,EAAD,KACI,yBAAKtB,UAAU,OAQX,kBAAC,EAAD,MARJ,IAWI,0CACA,wDAA6B,6BAA7B,qBAAoD,0CAApD,6BAEC3B,KAAKR,MAAMwD,MAAMR,KAAI,SAAAU,GAAI,OACxB,yBAAKR,IAAKQ,EAAKtD,IAAI,4BAAKsD,EAAKC,oB,GArC3BL,aCPEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,MAAK,SAAAwD,GACjCA,EAAaC,kB","file":"static/js/main.6cffef7f.chunk.js","sourcesContent":["import React, { Component } from 'react';              //libreria  principal para usar JSX\r\nimport {Button,Table} from 'reactstrap';               //libreria de sintaxis bootstrap con JSX\r\nimport axios from 'axios';                             //libreria axios para tratar peticiones al servidor\r\nimport {ToastContainer,toast} from 'react-toastify';   //toastify parapoder crear notificaciones en la aplicacion \r\nimport 'react-toastify/dist/ReactToastify.css'         //estilos de notificaciones Toastify\r\n\r\n//import CSRFToken from './csrftokenParaDjango';  //problema de cookie de django \r\n//import ComponenteToast from './ComponenteToast';\r\n\r\n\r\n//para utilizar esta interfaz grafica completa de CRUD para Django\r\n//solo se modifico en los metodos fetch la url asi el servidor que apunta y donde se encuentran los datos\r\n//1.- que fue la siguiente ruta  http://127.0.0.1:8000/api/tareas/ en todos los fetch\r\n\r\n//CÃ³digos de estado de respuesta HTTP\r\n//https://developer.mozilla.org/es/docs/Web/HTTP/Status\r\n\r\n\r\n\r\n//clase del componenteApp\r\nclass componenteApp extends Component {\r\n\r\n    //contructor de la componenteApp\r\n    constructor(){\r\n        //con el coonstructor nos permite inicializar el componente\r\n        //contructor de la clase y del componente web\r\n        //que nos permite heradar todos metodos,fucionalidades,clases, asi como manipular estado del componente  de react \r\n        super();\r\n        \r\n        //estado del componente web de react son las propiedates \r\n        this.state={\r\n            //estado del componente\r\n            //desde aqui podemos inicilizar valores de las propiedades del componente \r\n            //podemos inicializar los valores vacios al iniciar el componente\r\n            titulo:'',\r\n            descrip:'',\r\n            tareas:[],\r\n            id:'' \r\n        };\r\n\r\n        //metodos para inicializar componente\r\n        //vincular el metodo al estado del componente \r\n        this.AgregarYActulizarTarea = this.AgregarYActulizarTarea.bind(this);\r\n        this.ManejarElCambio = this.ManejarElCambio.bind(this);\r\n    }\r\n \r\n    //metodos del componente \r\n    //componentDidMount se usa para cuando deseamos cargar datos alguna otra cosa inmediatemente despues iniciar la interfaz y lo primero que se renderiza del  componente\r\n    //este metodo se ejecuta antes que cualquiera, se puede utilizar para cargar algo CON prioridad\r\n    componentDidMount(){\r\n        //console.log(\"el componente fue montado...\");\r\n        //mandamos atraer el metodo que hace peticion para mostrar los datos en la base datos \r\n        this.Obtenertareas();\r\n    }\r\n    /***************************Eventos o metodos del componente*************************************/\r\n    //eventp o metodo para  inssertar y o actualizar una tarea, que hace una peticion al servidor por metodo POST para insertar o por metodo PUT para actualizar\r\n    AgregarYActulizarTarea(e){\r\n        if(this.state.id){\r\n            //console.log(\">>>>>>>>>>>>>>>>>>>>>>>><\"+this.state._id)\r\n            //////////////////// con api fetch ////////////////////////\r\n            console.log(\"si exite un id actulizalo\");\r\n            // fetch('http://127.0.0.1:8000/api/tareas/'+this.state.id+'/',{\r\n            //     method: 'PUT',\r\n            //     body: JSON.stringify(this.state),\r\n            //     headers:{\r\n            //         \"Accept\": \"application/json\",\r\n            //         \"Content-Type\": \"application/json\"\r\n            //     }  \r\n            // })\r\n            // .then(res => res.json())\r\n            // .then(data => {\r\n            //     console.log(data);\r\n            //     this.setState({titulo:\"\", descrip:\"\", id:\"\"});\r\n            //     this.Obtenertareas();\r\n            //     toast.success(\"Tarea actualizada...\",{\r\n            //         position: toast.BOTTOM_LEFT\r\n            //     });\r\n            // });\r\n            //////////////////// con api fetch ////////////////////////\r\n\r\n\r\n            ///////////////////// con axios ///////////////////////////\r\n            axios.put('http://127.0.0.1:8000/api/tareas/'+this.state.id+'/',{\r\n                //Re guardar los datos actualizados\r\n                titulo:this.state.titulo,\r\n                descrip:this.state.descrip,\r\n                headers:{\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                } \r\n            })\r\n            .then(res => {\r\n                //mostramos la respuesta del servidor por consola \r\n                console.log(res);\r\n                //limpiamos el estado del componente \r\n                this.setState({titulo:\"\", descrip:\"\", id:\"\"});\r\n                //volvemos  repentir con los datos de la base de datos actualizados \r\n                this.Obtenertareas();\r\n                //mandamos la notificacion conel toast\r\n                toast.success(\"Tarea actualizada...\",{\r\n                    position: toast.BOTTOM_LEFT\r\n                });\r\n            });\r\n            ///////////////////// con axios ///////////////////////////\r\n        }else{\r\n            console.log(\"no exite un id de inicio, inserta nuevo registro\");\r\n\r\n            //para verificar si esta funcionando el metodo al dar clik por mensaje en consola \r\n            //console.log(\"agregar tarea...\");\r\n            //para mostrar el estado del componente por consola \r\n            //console.log(this.state);\r\n\r\n            //para mandar datos hacia el servidor usaremos el metodo fetch \r\n            //se debe especificar hacia que ruta se hara la peticion en este caso \"/api/tareas\"\r\n            //que es el api que ya hemos creado \r\n\r\n            //en ves de usar fetch como metodo de envio de datos se puede usar la libreria superint, asios \r\n            //para hacer una peticion al servidor en este caso de insertar datos por el metodo post en formato json\r\n            \r\n            //////////////////// con api fetch ////////////////////////\r\n            // fetch(\"http://127.0.0.1:8000/api/tareas/\",{\r\n            //     //parametros que se pasaran por el metodo post\r\n            //     //body es una variable que almacena los datos en formatos json\r\n            //     //el metodo JSON.stringify() hace una convercion de datos a formato json\r\n            //     //al usar this.state se usan todo los datos del componente en este caso titulo:'',descrip:'', tareas:[], id:''                \r\n            //     //metodo post se usa para insertar datos \r\n            //     method:\"POST\",\r\n            //     //para convertir el estado a un string json   \r\n            //     body: JSON.stringify(this.state),\r\n            //     headers:{\r\n            //         \"Accept\": \"application/json\",\r\n            //         \"Content-Type\": \"application/json\"\r\n            //     }   \r\n            // })\r\n\r\n            // //.then(res => console.log(res))\r\n            // .then(res => res.json())\r\n            // //.then(data => console.log(data))\r\n            // .then(data => {\r\n            //     console.log(data);\r\n            //     //intentar mandar una notificacion de que ha sido enviada la peticion \r\n            //     //de forma grafica \r\n            //     //<ComponenteToast/>\r\n            //     this.setState({titulo:\"\",descrip:\"\"}); \r\n            //     this.Obtenertareas();\r\n            //     toast.success(\"Tarea agregada...\",{\r\n            //         position: toast.BOTTOM_LEFT\r\n            //     });\r\n            // })  \r\n            // .catch(err => {\r\n            //     console.log(err)\r\n            // });\r\n            //////////////////// con api fetch ////////////////////////\r\n\r\n\r\n            ///////////////////// con axios ///////////////////////////\r\n            //otro ejemplo https://www.digitalocean.com/community/tutorials/react-axios-react-es\r\n            //https://desarrolloweb.com/articulos/axios-ajax-cliente-http-javascript.html\r\n            //https://www.digitalocean.com/community/tutorials/react-axios-react-es\r\n            //https://masteringjs.io/tutorials/axios/post-json\r\n  \r\n            //console.log(this.state);\r\n            axios.post('http://127.0.0.1:8000/api/tareas/', {\r\n                // enviar variables individuales\r\n                titulo:this.state.titulo,\r\n                descrip:this.state.descrip,\r\n                headers:{\r\n                    \"Accept\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                }   \r\n            })\r\n            .then((res) =>{\r\n                //imprecion del arreglo el status de la peticion al servidor \r\n                console.log(res);\r\n                //imprecion de la arreglo data que contiene los datos exitentes en el servidor \r\n                console.log(res.data);\r\n                //para limpiar las variables del estado del componente\r\n                this.setState({titulo:\"\",descrip:\"\"}); \r\n                //volvemos a mostrar todod los datos originales \r\n                this.Obtenertareas();\r\n                //y mostrar la notificacion visual con el toast\r\n                toast.success(\"Tarea agregada...\",{\r\n                    position: toast.BOTTOM_LEFT\r\n                });\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n\r\n            ///////////////////// con axios ///////////////////////////\r\n        }\r\n            \r\n        \r\n        //para evitar refresco en la vista al enviar datos \r\n        e.preventDefault();\r\n    }\r\n    //evento o metodo mostrar y listar los registros , que hace una peticion al servidor por el metodo GET\r\n    Obtenertareas(){\r\n\r\n        //////////////////// con api fetch ////////////////////////\r\n        // fetch(\"http://127.0.0.1:8000/api/tareas/\")\r\n        // .then(res => res.json())\r\n        // //.then(data => console.log(data))\r\n        // .then(data => {\r\n        // //console.log(data);\r\n        // this.setState({tareas:data});\r\n        //     console.log(this.state.tareas);\r\n        // })\r\n        //////////////////// con api fetch ////////////////////////\r\n\r\n        ///////////////////// con axios ///////////////////////////\r\n        axios.get('http://127.0.0.1:8000/api/tareas/', {\r\n            responseType: 'json'\r\n        })\r\n        .then((res)=>{\r\n            if(res.status===200) {\r\n                //imprecion del arreglo el status de la peticion al servidor \r\n                console.log(res);\r\n                //imprecion de la arreglo data que contiene los datos exitentes en el servidor \r\n                console.log(res.data);\r\n                //guardado de los datos temporales en el estado del componente\r\n                this.setState({tareas:res.data});\r\n            }\r\n        })\r\n        .catch((e)=> {\r\n            //por si manda un error de no haber datos \r\n            console.log(e);\r\n         });\r\n        ///////////////////// con axios ///////////////////////////\r\n\r\n\r\n\r\n    }\r\n    //evento o metodo eliminar registros, que hace una peticion al servidor por el metodo DELETE\r\n    EliminarTarea(id){\r\n       //if(window.confirm(\"estas seguro que deseas eliminar este registro...\")){\r\n            //para concatenar con + y con {$}\r\n\r\n        //////////////////// con api fetch ////////////////////////\r\n        // console.log(\"eliminando tarea...\",id);\r\n        //     //peticion al servidorr para eliminar \r\n        //     //manera de concatenas con +\r\n        //     //fetch(\"/api/tareas/\"+id)\r\n        //     //manera de concatenas con ${}\r\n        // fetch('http://127.0.0.1:8000/api/tareas/'+id,{\r\n        //     method:'DELETE',\r\n        //     headers:{\r\n        //         \"Accept\": \"application/json\",\r\n        //         \"Content-Type\": \"application/json\"\r\n        //     }\r\n        // })\r\n        // .then(res => res.json())    \r\n        // .then(data => {\r\n        //     console.log(data);\r\n        //     this.Obtenertareas();\r\n        // }).catch(err => {\r\n        //     console.log(err)\r\n        //     this.Obtenertareas();\r\n        //     toast.error(\"Tarea elimnada...\",{\r\n        //         position: toast.BOTTOM_LEFT\r\n        //     });\r\n        // });\r\n        //////////////////// con api fetch ////////////////////////\r\n        \r\n\r\n\r\n        ///////////////////// con axios ///////////////////////////\r\n        console.log(\"eliminando tarea...\",id);\r\n        //se le pasa el url y el identificador\r\n        axios.delete('http://127.0.0.1:8000/api/tareas/'+id,{\r\n            headers:{\r\n                \"Accept\": \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })   \r\n        .then((res) => {\r\n            //console.log(\">>>>>>\"+res.status);\r\n            //si el status se verifica que ya sea eliminado lo que hacemos es volver a pintar los datos \r\n            //por consola y en la interfaz grafica\r\n            if(res.status===204) {\r\n                //console.log(res.status);\r\n                this.Obtenertareas();\r\n                toast.error(\"Tarea elimnada...\",{\r\n                        position: toast.BOTTOM_LEFT\r\n                });\r\n            }\r\n        }).catch((e) => {\r\n            //si ocurre un error lo mostramos por consola y no se para la ejecucion de la aplicacion\r\n            console.log(e);\r\n        });\r\n        ///////////////////// con axios ///////////////////////////\r\n        \r\n    }\r\n    //evento o metodo que obtiene el registro por medio del ID seleccionado, donde se hace una peticion de un solo resgistro \r\n    ObtenerIdParaActualizar(id){\r\n\r\n            //////////////////// con api fetch ////////////////////////\r\n            //async ObtenerIdParaActualizar(id){\r\n            //console.log(\"actualizando tarea...\"+id);\r\n            // await fetch('http://127.0.0.1:8000/api/tareas/'+id)\r\n            //     .then(res => res.json())//convierte la peticion a formato json\r\n            //     .then(data => {\r\n            //         console.log(data);\r\n            //         //actualiza el estado\r\n            //         this.setState({\r\n            //             titulo: data.titulo,\r\n            //             descrip: data.descrip,\r\n            //             id: data.id\r\n            //         })\r\n            // });// mustra los datos obtenidos por consola\r\n            //////////////////// con api fetch ////////////////////////\r\n            \r\n\r\n            //////\r\n            ///////////////////// con axios ///////////////////////////\r\n        axios.get('http://127.0.0.1:8000/api/tareas/'+id)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                //actualizamos  el estado\r\n                this.setState({\r\n                    titulo: res.data.titulo,\r\n                    descrip: res.data.descrip,\r\n                    id: res.data.id\r\n                })\r\n            })\r\n            .catch((e) => {\r\n                //si ocurre un error lo mostramos por consola y no se para la ejecucion de la aplicacion\r\n                console.log(e);\r\n            });\r\n\r\n            ///////////////////// con axios ///////////////////////////\r\n\r\n    }\r\n    //evento que supervisa y inserion de datos en el formuario \r\n    ManejarElCambio(e){\r\n        //e.target obtiene todo el elemento al detectar el evento  \r\n        //e.target.value obtiene el valor especifico del elemento al detectar el evento  \r\n        //e.target.name obtiene el nombre especifico del elemento al detectar el evento \r\n        //console.log(e.target.name);\r\n        //obtenemos el nombre y el valor de target o elemento input del formulario \r\n        const {name, value } = e.target;\r\n        //cambiamos el estado del componente mediante el metodo setState\r\n        this.setState({\r\n            [name]:value\r\n        });\r\n    }\r\n    /***************************Eventos o metodos del componente*************************************/\r\n\r\n    //metodo para renderizar contenido en html dinamico mediante JSX, estas no son stiqutas HTML\r\n    //aqui es donde se crea todo el maquetado de la pagina web y se pueden anidad componentes\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"row fondoDiv3 \">\r\n                    <div className=\"col-12\">\r\n                        <h1>Operaciones CRUD with Django and Axios...</h1>\r\n                        <h6>Create -Insertar- , Read -Mostrar-, Update -Actulizar-, Delete -Eliminar-</h6>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-4 fondoDiv1\">\r\n                        <h3>Ingresar datos</h3>\r\n                        <form onSubmit={this.AgregarYActulizarTarea} method=\"post\">\r\n                             {/* <CSRFToken />  problema de cookie de django */}\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    {/*usamos la propieddad name para identificar a lo imputs, a este lo llamamos titulo*/}\r\n                                    {/*en este caso verficamos cuando se escriba cualquier cosa con el evento onchange por el metodo ManejarElCambio*/}\r\n                                    <input type=\"text\" name=\"titulo\"  placeholder=\"Titulo\" onChange={this.ManejarElCambio} value={this.state.titulo}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    {/*usamos la propieddad name para identificar a lo imputs , a este lo llamamos descrip*/}\r\n                                    {/*en este caso verficamos cuando se escriba cualquier cosa con el evento onchange por el metodo ManejarElCambio*/}\r\n                                    {/* <textarea type=\"text\" name=\"descrip\"  placeholder=\"Descripcion\" onChange={this.ManejarElCambio} value={this.state.descrip}></textarea> */}\r\n                                    <input type=\"text\" name=\"descrip\"  placeholder=\"Descripcion\" onChange={this.ManejarElCambio} value={this.state.descrip}></input>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <Button variant=\"primary\" type=\"submit\">Insertar</Button><br/>\r\n                                </div>\r\n                            </div>\r\n                            <ToastContainer autoClose={1500}/>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"col-8 fondoDiv2\">\r\n                        <h3>Muestreo de datos </h3>\r\n                        <Table hover size=\"sm\" responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Titulo</th>\r\n                                    <th>Descripcion</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {   //METODO MAP PARA HACER EL CORRIDO DE LA LISTA QUE CONTIENE LOS DATOS \r\n                                    this.state.tareas.map(tarea => {\r\n                                        return(\r\n                                            // KEY QUE IDENTIFICA CADA UNO DE LOS REGISTROS \r\n                                            // SE USAN LLAVES {} PARA PODER USAR JAVASCRIPT Y NO JSX \r\n                                            <tr key = {tarea.id}>   \r\n                                                <td> {tarea.titulo}  </td>\r\n                                                <td> {tarea.descrip} </td>\r\n                                                <td>\r\n                                                    <Button variant=\"primary\" onClick={() => this.EliminarTarea(tarea.id)}> Eliminar </Button><br/>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Button variant=\"primary\" onClick={() => this.ObtenerIdParaActualizar(tarea.id)}> Actualizar </Button><br/>\r\n                                                </td>\r\n                                            </tr> \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </div> \r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\n//para poder exportar el conponente y ser usado en otro componente \r\nexport default componenteApp;","import React,{Component} from 'react'\nimport { Container } from 'reactstrap';\n//import logo from './logo.svg';\nimport './App.css';\n//import Persona from './componentes/Persona'; // una clase para crear objetos de persona \n//import ComponenteApp  from './conponentesSecundarios/componenteApp';\n//import ComponenteMensajes from './ComponentesCurso/componenteMensajes'\n//import ComponenteAppDjango from './conponentesSecundarios/componenteAppDjango'\nimport ComponenteAppDjangoWithAxios from './conponentesSecundarios/componenteAppDjangoWithAxios'\n//import ComponenteAppSring2  from './conponentesSecundarios/componenteAppSpring2';\n//import ComponentePracticaBS from './conponentesSecundarios/ComponentePracticaBS';\n//import componenteContenido1 from './ComponentesCurso/componenteContenido1';\n\n//import ComponenteGridLayout from './ComponentesCurso/componenteGridLayout';\n//import ComponenteGridLayoutDos from './ComponentesCurso/componenteGridLayoutDos';\n\n//instaciacion de compoenenteCRUD\n\n//clase para crear el componente de vista\nclass App extends Component{\n\n  \n  //contructor del compoenente \n  constructor(){\n    //es necesario usar el super cuando se extiende de la clase component\n    super()\n    //se inicia el estado y se asigna un arreglo de datos \n    this.state={users: []}\n  }\n\n  // componentDidMount() {\n  //   // se llena el arreglo con el archivo json almacenado en el servidor de express como API\n  //   fetch('/users')\n  //     .then(res => res.json())\n  //     .then(users => this.setState({ users }));\n  // }\n\n  render() {\n    //se renderiza los datos que se han obtenido de al cargar el arreglo y solo se muestran \n    return (\n      <Container>\n          <div className=\"App\">\n            \n              {/* <ComponenteMensajes/> */}\n              {/* <ComponentePracticaBS/> */}\n              {/* <ComponenteGridLayout/> */}\n              {/* <ComponenteGridLayoutDos /> */}\n              {/* <ComponenteApp/>                   UI para back-end del framework expressJS de javascript*/}\n              {/*<ComponenteAppDjango/>              UI para back-end del framework Django   de  python*/} \n              <ComponenteAppDjangoWithAxios/> {/*    UI para back-end del framework Django con axios de python*/} \n              {/* <ComponenteAppSring2/>             UI para back-end del framework Spring boot de java */}\n              \n              <h1>Data Users</h1>\n              <h6>estos datos son cargados <br/> desde un archivo <strong> JSON </strong>almacenado en el servidor</h6>\n              {/* metedo iterativo para mostrar datos mediante el uso de map */}\n              {this.state.users.map(user =>\n                <div key={user.id}><h6>{user.username}</h6></div>\n              )}\n          </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n//estilos de css de bootstrap\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n//mis estilos propios \nimport \"./components/conponentesSecundarios/componenteApp.css\"\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}